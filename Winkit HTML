<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Winnkit! - Smart Grocery Delivery</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'swift-primary': '#EF4444', // Red/Orange for speed
                        'swift-secondary': '#F97316', // Bright Orange
                        'swift-accent': '#10B981', // Green for freshness/success
                        'swift-background': '#F9FAFB', // Light grey background
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    <style>
        /* Custom scrollbar for category section */
        .no-scrollbar::-webkit-scrollbar {
            display: none;
        }
        .no-scrollbar {
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
        /* Simple animation for message box */
        @keyframes fadeInDown {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade-in-down {
            animation: fadeInDown 0.3s ease-out forwards;
        }

        /* Loading Spinner */
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        .spinner-sm {
            border: 3px solid rgba(59, 130, 246, 0.3); /* Blue-500 transparent */
            border-top: 3px solid #3B82F6; /* Blue-500 */
            width: 14px;
            height: 14px;
        }
        
        /* LLM Content Formatting for better Markdown rendering */
        .llm-content h2 {
            font-weight: 700;
            font-size: 1.25rem; /* text-xl */
            margin-top: 1.25rem;
            margin-bottom: 0.5rem;
            color: #EF4444; /* swift-primary */
            border-bottom: 1px solid #FEE2E2;
            padding-bottom: 4px;
        }
        .llm-content p {
            margin-bottom: 0.75rem;
            line-height: 1.5;
        }
        .llm-content ul {
            list-style-type: disc;
            margin-left: 2rem;
            margin-bottom: 1rem;
            padding-left: 0.5rem;
        }
        .llm-content li {
            margin-bottom: 0.5rem;
        }
        .llm-content a {
            color: #10B981; /* swift-accent */
            text-decoration: underline;
        }
    </style>
</head>
<body class="bg-swift-background font-sans">

    <!-- Fixed Header (Navbar) -->
    <header class="sticky top-0 z-50 bg-white shadow-md">
        <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-3 flex items-center justify-between">
            
            <!-- Logo and Delivery Info -->
            <div class="flex items-center space-x-4">
                <div class="text-2xl font-extrabold text-swift-primary">
                    Winn<span class="text-swift-secondary">kit!</span>
                </div>
                <button id="locationButton" class="hidden sm:flex items-center text-sm font-medium text-gray-700 bg-gray-100 rounded-full px-3 py-1.5 transition duration-150 hover:bg-gray-200">
                    <svg class="w-4 h-4 mr-1 text-swift-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.828 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                    <span class="truncate max-w-[100px]">Sydney, NSW 2000</span>
                    <span class="ml-2 bg-swift-primary text-white text-xs font-bold px-2 rounded-full">10 Min</span>
                </button>
            </div>

            <!-- Search Bar (Middle) -->
            <div class="flex-grow max-w-lg hidden md:block">
                <input type="text" placeholder="Search for Rice, Milk, Bread, Snacks..." class="w-full border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-swift-primary transition duration-150" />
            </div>

            <!-- Cart Button (Right) -->
            <div class="flex items-center space-x-3">
                <button class="md:hidden p-2 rounded-full text-gray-600 hover:bg-gray-100">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                </button>
                <button id="cartIcon" class="relative p-2 rounded-full bg-swift-primary text-white transition duration-150 hover:bg-swift-secondary">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>
                    <span id="cartCount" class="absolute -top-1 -right-1 flex items-center justify-center h-5 w-5 rounded-full bg-swift-accent text-xs font-bold text-white leading-none">0</span>
                </button>
            </div>
        </div>
    </header>

    <!-- Main Content Area -->
    <main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6">

        <!-- Banner / Hero Section -->
        <section class="mb-8 rounded-xl overflow-hidden shadow-lg bg-gradient-to-r from-swift-primary to-swift-secondary p-6 md:p-10 text-white">
            <div class="flex flex-col md:flex-row items-center justify-between">
                <div>
                    <h1 class="text-3xl sm:text-4xl font-extrabold mb-2 leading-tight">
                        Got a craving? Get it in <span class="text-yellow-300">10 Minutes!</span>
                    </h1>
                    <p class="text-lg font-medium opacity-90">Your daily essentials, fresh fruits, vegetables, and snacks delivered lightning fast across Australia.</p>
                </div>
                <div class="mt-4 md:mt-0">
                    <!-- Placeholder for a quick delivery graphic -->
                    <svg class="w-20 h-20 md:w-24 md:h-24 text-white opacity-80" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                </div>
            </div>
        </section>

        <!-- Category Scroll Section -->
        <section class="mb-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Shop by Category </h2>
            <div id="category-scroll" class="flex overflow-x-scroll space-x-4 pb-3 no-scrollbar">
                <!-- Categories will be injected here by JS -->
            </div>
        </section>

        <!-- Product Grid -->
        <section class="mb-12">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">
                <span id="currentCategoryTitle">All</span> Products
            </h2>
            <div id="product-grid" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
                <!-- Products will be injected here by JS -->
            </div>
        </section>
    </main>
    
    <!-- Footer -->
    <footer class="bg-gray-800 text-white p-6 text-center">
        <p class="text-sm">&copy; 2025 Winnkit!. Quick Delivery Service. | Prices in AUD. | AI Powered by Gemini.</p>
    </footer>

    <!-- Cart Modal (Hidden by default) -->
    <div id="cartModal" class="hidden fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-75">
        <div class="flex items-center justify-center min-h-screen">
            <div class="bg-white rounded-xl shadow-2xl w-full max-w-lg m-4 transform transition-all duration-300">
                
                <!-- Modal Header -->
                <div class="p-5 border-b flex justify-between items-center">
                    <h3 class="text-xl font-bold text-gray-800 flex items-center">
                        <svg class="w-6 h-6 mr-2 text-swift-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>
                        Your Winnkit! Basket (Items: <span id="modalCartCount" class="ml-1">0</span>)
                    </h3>
                    <button id="closeModal" class="text-gray-400 hover:text-gray-600 transition">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                    </button>
                </div>

                <!-- Modal Body (Cart Items) -->
                <div id="cartItemsList" class="p-5 max-h-80 overflow-y-auto space-y-3">
                    <!-- Cart items list will be rendered here -->
                    <p class="text-center text-gray-500 italic">Your basket is empty. Add some groceries!</p>
                </div>

                <!-- Modal Footer (Checkout & LLM) -->
                <div class="p-5 border-t space-y-3">
                    <button id="generateRecipeBtn" class="w-full bg-yellow-500 text-white py-3 rounded-lg font-bold text-lg hover:bg-yellow-600 transition duration-150 shadow-md disabled:bg-gray-400 flex items-center justify-center" disabled>
                        Generate Recipe ✨
                    </button>
                    <div class="flex justify-between items-center mb-2 text-lg font-bold">
                        <span>Subtotal:</span>
                        <span id="cartTotal" class="text-swift-secondary">$0.00</span> 
                    </div>
                    <button id="checkoutButton" class="w-full bg-swift-accent text-white py-3 rounded-lg font-bold text-lg hover:bg-green-600 transition duration-150 shadow-lg shadow-swift-accent/50 disabled:bg-gray-400" disabled>
                        Proceed to Checkout (10 Min Delivery)
                    </button>
                </div>

            </div>
        </div>
    </div>

    <!-- LLM Response Modal (Hidden by default) -->
    <div id="llmResponseModal" class="hidden fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-75">
        <div class="flex items-center justify-center min-h-screen">
            <div class="bg-white rounded-xl shadow-2xl w-full max-w-2xl m-4 transform transition-all duration-300">
                
                <!-- Modal Header -->
                <div class="p-5 border-b flex justify-between items-center bg-swift-primary rounded-t-xl">
                    <h3 id="llmResponseTitle" class="text-xl font-bold text-white flex items-center">
                        AI Insight
                    </h3>
                    <button id="closeLlmModal" class="text-white hover:text-gray-200 transition">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="p-5 max-h-[80vh] overflow-y-auto">
                    <div id="llmResponseContent" class="text-gray-700 llm-content">
                        <!-- LLM content will be rendered here -->
                    </div>
                    <div id="llmLoadingIndicator" class="hidden flex justify-center items-center py-10">
                        <div class="spinner w-8 h-8 mr-3"></div>
                        <p class="text-gray-500 font-medium">Generating insight...</p>
                    </div>
                    <div id="llmCitations" class="mt-4 pt-3 border-t border-gray-100 text-xs text-gray-500">
                        <!-- Citations will be rendered here -->
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script>
        // --- Data Mockup (Prices in AUD) ---
        const MOCK_PRODUCTS = [
            // Dairy
            { id: 3, name: "Full Cream Milk", price: 2.80, category: "Dairy", image: "https://placehold.co/100x100/3B82F6/FFFFFF?text=Milk+1L", unit: "1 L" },
            { id: 32, name: "Full Cream Milk", price: 3.50, category: "Dairy", image: "https://placehold.co/100x100/3B82F6/FFFFFF?text=Milk+2L", unit: "2 L" },
            { id: 33, name: "Full Cream Milk", price: 4.80, category: "Dairy", image: "https://placehold.co/100x100/3B82F6/FFFFFF?text=Milk+3L", unit: "3 L" },
            { id: 31, name: "Skim Milk", price: 2.60, category: "Dairy", image: "https://placehold.co/100x100/93C5FD/000000?text=Skim+Milk+1L", unit: "1 L" },
            { id: 38, name: "Skim Milk", price: 3.30, category: "Dairy", image: "https://placehold.co/100x100/93C5FD/000000?text=Skim+Milk+2L", unit: "2 L" },
            { id: 39, name: "Skim Milk", price: 4.50, category: "Dairy", image: "https://placehold.co/100x100/93C5FD/000000?text=Skim+Milk+3L", unit: "3 L" },
            { id: 40, name: "Lactose Free Milk", price: 4.00, category: "Dairy", image: "https://placehold.co/100x100/4B5563/FFFFFF?text=Lactose+Free+1L", unit: "1 L" },
            { id: 43, name: "Soy Milk", price: 3.50, category: "Dairy", image: "https://placehold.co/100x100/A78BFA/FFFFFF?text=Soy+Milk+1L", unit: "1 L" }, 
            { id: 34, name: "Salted Butter Block", price: 3.80, category: "Dairy", image: "https://placehold.co/100x100/FCD34D/000000?text=Butter+Salted+250g", unit: "250 g" },
            { id: 35, name: "Salted Butter Block", price: 6.50, category: "Dairy", image: "https://placehold.co/100x100/FCD34D/000000?text=Butter+Salted+500g", unit: "500 g" },
            { id: 41, name: "Unsalted Butter Block", price: 3.80, category: "Dairy", image: "https://placehold.co/100x100/FCD34D/000000?text=Butter+Unsalted+250g", unit: "250 g" },
            { id: 42, name: "Unsalted Butter Block", price: 6.50, category: "Dairy", image: "https://placehold.co/100x100/FCD34D/000000?text=Butter+Unsalted+500g", unit: "500 g" },
            { id: 36, name: "Sharma's Yoghurt", price: 8.00, category: "Dairy", image: "https://placehold.co/100x100/A78BFA/FFFFFF?text=Yoghurt+2kg", unit: "2 Kg Tub" },
            { id: 37, name: "Sharma's Yoghurt", price: 15.00, category: "Dairy", image: "https://placehold.co/100x100/A78BFA/FFFFFF?text=Yoghurt+5kg", unit: "5 Kg Tub" },
            { id: 22, name: "Shredded Cheese", price: 5.50, category: "Dairy", image: "https://placehold.co/100x100/FCD34D/000000?text=Cheese", unit: "250 g" },
            
            // Rice and Dal
            { id: 50, name: "Toor Dal (Split Pigeon Peas)", price: 2.00, category: "Rice and Dal", image: "https://placehold.co/100x100/4F46E5/FFFFFF?text=Toor+250g", unit: "250 g" },
            { id: 51, name: "Toor Dal (Split Pigeon Peas)", price: 3.50, category: "Rice and Dal", image: "https://placehold.co/100x100/4F46E5/FFFFFF?text=Toor+500g", unit: "500 g" },
            { id: 52, name: "Yellow Split Dal (Chana Dal)", price: 1.80, category: "Rice and Dal", image: "https://placehold.co/100x100/4F46E5/FFFFFF?text=Yellow+250g", unit: "250 g" },
            { id: 53, name: "Yellow Split Dal (Chana Dal)", price: 3.00, category: "Rice and Dal", image: "https://placehold.co/100x100/4F46E5/FFFFFF?text=Yellow+500g", unit: "500 g" },
            { id: 56, name: "Basmati Rice (Premium)", price: 28.00, category: "Rice and Dal", image: "https://placehold.co/100x100/A855F7/FFFFFF?text=Basmati+5Kg", unit: "5 Kg" },
            { id: 57, name: "Basmati Rice (Premium)", price: 55.00, category: "Rice and Dal", image: "https://placehold.co/100x100/A855F7/FFFFFF?text=Basmati+10Kg", unit: "10 Kg" },
            { id: 54, name: "Sona Masoori Rice", price: 18.00, category: "Rice and Dal", image: "https://placehold.co/100x100/A855F7/FFFFFF?text=Sona+5Kg", unit: "5 Kg" },
            { id: 55, name: "Sona Masoori Rice", price: 34.00, category: "Rice and Dal", image: "https://placehold.co/100x100/A855F7/FFFFFF?text=Sona+10Kg", unit: "10 Kg" },


            // Snacks
            { id: 60, name: "Good Day Cookies", price: 3.50, category: "Snacks", image: "https://placehold.co/100x100/FBBF24/000000?text=Good+Day", unit: "250 gm" },
            { id: 61, name: "Hide and Seek Biscuits", price: 4.00, category: "Snacks", image: "https://placehold.co/100x100/6D28D9/FFFFFF?text=Hide+Seek", unit: "250 gm" },
            { id: 62, name: "Plain Rusk", price: 3.00, category: "Snacks", image: "https://placehold.co/100x100/FBBF24/000000?text=Rusk", unit: "250 gm" },
            { id: 63, name: "Oreo Original Cookies", price: 4.50, category: "Snacks", image: "https://placehold.co/100x100/1F2937/FFFFFF?text=Oreo", unit: "250 gm" },
            { id: 64, name: "Jim Jam Biscuits", price: 3.80, category: "Snacks", image: "https://placehold.co/100x100/DC2626/FFFFFF?text=Jim+Jam", unit: "250 gm" },
            { id: 6, name: "Lay's Magic Masala Chips", price: 2.00, category: "Snacks", image: "https://placehold.co/100x100/EC4899/FFFFFF?text=Lays", unit: "52 g" },
            { id: 7, name: "Instant Noodles (4pk)", price: 5.50, category: "Snacks", image: "https://placehold.co/100x100/FACC15/000000?text=Noodles", unit: "4 x 70 g" },
            { id: 65, name: "Haldiram's Nutcracker", price: 5.00, category: "Snacks", image: "https://placehold.co/100x100/F59E0B/FFFFFF?text=Nutcracker", unit: "250 gm" },
            { id: 66, name: "Alu Bhujia", price: 4.50, category: "Snacks", image: "https://placehold.co/100x100/F97316/FFFFFF?text=Alu+Bhujia", unit: "250 gm" },

            // Other Existing Products (Non-Beverage)
            { id: 2, name: "Plain Flour (Atta)", price: 10.00, category: "Staples", image: "https://placehold.co/100x100/F97316/FFFFFF?text=Flour", unit: "5 Kg" },
            { id: 4, name: "Fresh Coriander Bunch", price: 3.00, category: "Vegetables", image: "https://placehold.co/100x100/10B981/FFFFFF?text=Coriander", unit: "1 Bunch" },
            { id: 5, name: "Brown Onions", price: 3.50, category: "Vegetables", image: "https://placehold.co/100x100/94A3B8/FFFFFF?text=Onion", unit: "1 Kg" },
            { id: 8, name: "Iodised Table Salt", price: 1.50, category: "Spices & Masala", image: "https://placehold.co/100x100/6B7280/FFFFFF?text=Salt", unit: "1 Kg" },
            { id: 10, name: "Classic Tomato Ketchup", price: 4.00, category: "Sauces", image: "https://placehold.co/100x100/DC2626/FFFFFF?text=Ketchup", unit: "500 g" },
            { id: 13, name: "Immunity Booster Paste (500g)", price: 12.00, category: "Health & Wellness", image: "https://placehold.co/100x100/059669/FFFFFF?text=Booster", unit: "500 g" },
            { id: 14, name: "Cadbury Dairy Milk Block", price: 5.00, category: "Sweets", image: "https://placehold.co/100x100/A16207/FFFFFF?text=Chocolate", unit: "180 g" },
            { id: 15, name: "Jelly Beans Party Mix", price: 3.50, category: "Sweets", image: "https://placehold.co/100x100/F472B6/FFFFFF?text=Jelly", unit: "200 g" },
            { id: 26, name: "Kaju Katli (Cashew Fudge)", price: 15.00, category: "Sweets", image: "https://placehold.co/100x100/FACC15/000000?text=Kaju+Katli", unit: "250 g" },
            { id: 27, name: "Gulab Jamun (In Syrup)", price: 6.50, category: "Sweets", image: "https://placehold.co/100x100/DC2626/FFFFFF?text=Gulab+Jamun", unit: "1 Kg Tin" },
            { id: 28, name: "Motichoor Laddu", price: 8.00, category: "Sweets", image: "https://placehold.co/100x100/F97316/FFFFFF?text=Laddu", unit: "500 g" },
            { id: 29, name: "Soan Papdi (Flaky Sweet)", price: 4.00, category: "Sweets", image: "https://placehold.co/100x100/FBBF24/000000?text=Soan+Papdi", unit: "250 g" },
            { id: 30, name: "Ras Malai (Dessert Cheese)", price: 9.50, category: "Sweets", image: "https://placehold.co/100x100/93C5FD/FFFFFF?text=Ras+Malai", unit: "500 g" },
            { id: 16, name: "Rolling Papers (Kingsize)", price: 4.00, category: "Rolling paper and tobacco", image: "https://placehold.co/100x100/0F766E/FFFFFF?text=Papers", unit: "Pack of 32" },
            { id: 17, name: "Smoking Blend Alternative", price: 15.00, category: "Rolling paper and tobacco", image: "https://placehold.co/100x100/374151/FFFFFF?text=Blend", unit: "50 g" },
            
            // Oil & Masala (UPDATED: Removed ID 19 and ID 80)
            { id: 18, name: "Premium Canola Oil", price: 8.50, category: "Oil & Masala", image: "https://placehold.co/100x100/FCD34D/000000?text=Oil+1L", unit: "1 L" },
            
            { id: 11, name: "Premium Clarified Butter (Ghee)", price: 35.00, category: "Oil & Masala", image: "https://placehold.co/100x100/FACC15/000000?text=Ghee+1L", unit: "1 L" }, 
            { id: 91, name: "Premium Clarified Butter (Ghee)", price: 65.00, category: "Oil & Masala", image: "https://placehold.co/100x100/FACC15/000000?text=Ghee+2L", unit: "2 L" },
            
            { id: 81, name: "Premium Garam Masala Powder", price: 7.00, category: "Oil & Masala", image: "https://placehold.co/100x100/991B1B/FFFFFF?text=Garam+250g", unit: "250 gm" },
            { id: 82, name: "Premium Garam Masala Powder", price: 13.00, category: "Oil & Masala", image: "https://placehold.co/100x100/991B1B/FFFFFF?text=Garam+500g", unit: "500 gm" },
            
            { id: 83, name: "Hot Red Chilli Powder", price: 5.50, category: "Oil & Masala", image: "https://placehold.co/100x100/DC2626/FFFFFF?text=Chilli+250g", unit: "250 gm" },
            { id: 84, name: "Hot Red Chilli Powder", price: 10.00, category: "Oil & Masala", image: "https://placehold.co/100x100/DC2626/FFFFFF?text=Chilli+500g", unit: "500 gm" },
            
            { id: 85, name: "Ground Cumin Powder", price: 6.00, category: "Oil & Masala", image: "https://placehold.co/100x100/6B46C1/FFFFFF?text=Cumin+250g", unit: "250 gm" },
            { id: 86, name: "Ground Cumin Powder", price: 11.00, category: "Oil & Masala", image: "https://placehold.co/100x100/6B46C1/FFFFFF?text=Cumin+500g", unit: "500 gm" },
            
            { id: 87, name: "Ground Coriander Powder", price: 5.00, category: "Oil & Masala", image: "https://placehold.co/100x100/10B981/FFFFFF?text=Coriander+250g", unit: "250 gm" },
            { id: 88, name: "Ground Coriander Powder", price: 9.00, category: "Oil & Masala", image: "https://placehold.co/100x100/10B981/FFFFFF?text=Coriander+500g", unit: "500 gm" },
            
            { id: 89, name: "Turmeric Powder (Haldi)", price: 4.50, category: "Oil & Masala", image: "https://placehold.co/100x100/F59E0B/000000?text=Turmeric+250g", unit: "250 gm" },
            { id: 90, name: "Turmeric Powder (Haldi)", price: 8.00, category: "Oil & Masala", image: "https://placehold.co/100x100/F59E0B/000000?text=Turmeric+500g", unit: "500 gm" },
            
            // Home Cleaning products (Updated and new products added)
            { id: 20, name: "All-Purpose Cleaner", price: 6.50, category: "Home Cleaning products", image: "https://placehold.co/100x100/1D4ED8/FFFFFF?text=Cleaner", unit: "750 ml" },
            { id: 21, name: "Dishwashing Liquid", price: 4.20, category: "Home Cleaning products", image: "https://placehold.co/100x100/065F46/FFFFFF?text=Dishwash+400", unit: "400 ml" },
            
            // --- NEW PRODUCTS ---
            { id: 100, name: "Toilet Cleaner", price: 4.50, category: "Home Cleaning products", image: "https://placehold.co/100x100/4F46E5/FFFFFF?text=Toilet+Cleaner", unit: "250 ml" },
            { id: 101, name: "Toilet Freshener Gel", price: 3.00, category: "Home Cleaning products", image: "https://placehold.co/100x100/A78BFA/FFFFFF?text=Toilet+Fresh", unit: "250 ml" },
            { id: 102, name: "Dishwashing Liquid (Premium)", price: 5.00, category: "Home Cleaning products", image: "https://placehold.co/100x100/065F46/FFFFFF?text=Dishwash+500", unit: "500 ml" },
            { id: 103, name: "Dishwashing Tablets (Bulk)", price: 15.00, category: "Home Cleaning products", image: "https://placehold.co/100x100/374151/FFFFFF?text=Dish+Tabs", unit: "500 gm" },
            { id: 104, name: "Laundry Liquid", price: 7.50, category: "Home Cleaning products", image: "https://placehold.co/100x100/DC2626/FFFFFF?text=Laundry+Liquid", unit: "500 ml" },
            { id: 105, name: "Laundry Gel (Concentrate)", price: 8.00, category: "Home Cleaning products", image: "https://placehold.co/100x100/F97316/FFFFFF?text=Laundry+Gel", unit: "500 ml" },
            
            // Beverages
            { id: 70, name: "Society Tea", price: 8.00, category: "Beverages", image: "https://placehold.co/100x100/D97706/FFFFFF?text=Society+500g", unit: "500 gm" },
            { id: 71, name: "Taj Mahal Tea", price: 9.50, category: "Beverages", image: "https://placehold.co/100x100/D97706/FFFFFF?text=Taj+Mahal+500g", unit: "500 gm" },
            { id: 75, name: "Instant Tea Premix", price: 6.00, category: "Beverages", image: "https://placehold.co/100x100/D97706/FFFFFF?text=Instant+Tea", unit: "250 g" },
            { id: 72, name: "Bru Instant Coffee", price: 15.00, category: "Beverages", image: "https://placehold.co/100x100/5A67D8/FFFFFF?text=Bru+500g", unit: "500 gm" },
            { id: 73, name: "Nescafe Classic Coffee", price: 18.00, category: "Beverages", image: "https://placehold.co/100x100/5A67D8/FFFFFF?text=Nescafe+500g", unit: "500 gm" },
            { id: 74, name: "Bournvita Powder", price: 10.50, category: "Beverages", image: "https://placehold.co/100x100/7C3AED/FFFFFF?text=Bournvita+1Kg", unit: "1 Kg" },
        ];

        const CATEGORIES = [
            { name: "Sweets", icon: "🍫" },
            { name: "Rolling paper and tobacco", icon: "🚬" },
            { name: "Dairy", icon: "🥛" },
            { name: "Rice and Dal", icon: "🍚" },
            { name: "Snacks", icon: "🍟" },
            { name: "Beverages", icon: "☕" },
            { name: "Oil & Masala", icon: "🌶️" },
            { name: "Home Cleaning products", icon: "🧹" },
            // Removed 'Staples' and 'Spices & Masala' as they were merged or replaced with more specific ones like 'Rice and Dal' and 'Oil & Masala'
        ];

        // --- State Management ---
        let cart = {}; // { productId: quantity, ... }
        let activeCategory = 'All';

        // --- API Configuration ---
        const API_KEY = ""; // Canvas environment will provide the key
        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${API_KEY}`;
        
        // --- DOM Elements ---
        const productGrid = document.getElementById('product-grid');
        const categoryScroll = document.getElementById('category-scroll');
        const cartIcon = document.getElementById('cartIcon');
        const cartModal = document.getElementById('cartModal');
        const closeModalButton = document.getElementById('closeModal');
        const cartCountDisplay = document.getElementById('cartCount');
        const modalCartCountDisplay = document.getElementById('modalCartCount');
        const cartItemsList = document.getElementById('cartItemsList');
        const cartTotalDisplay = document.getElementById('cartTotal');
        const checkoutButton = document.getElementById('checkoutButton');
        const locationButton = document.getElementById('locationButton');
        const generateRecipeBtn = document.getElementById('generateRecipeBtn');
        const currentCategoryTitle = document.getElementById('currentCategoryTitle');
        
        const llmResponseModal = document.getElementById('llmResponseModal');
        const closeLlmModal = document.getElementById('closeLlmModal');
        const llmResponseTitle = document.getElementById('llmResponseTitle');
        const llmResponseContent = document.getElementById('llmResponseContent');
        const llmLoadingIndicator = document.getElementById('llmLoadingIndicator');
        const llmCitations = document.getElementById('llmCitations');


        // --- Utility Functions ---

        /**
         * Simple Markdown-to-HTML converter for LLM text.
         * Handles headings (##) and unordered lists (* or -).
         * @param {string} markdownText - Markdown string from LLM.
         * @returns {string} HTML string.
         */
        function markdownToHtml(markdownText) {
            if (!markdownText) return '';
            let html = markdownText;

            // Headings (##) -> <h2>
            html = html.replace(/^##\s*(.*)$/gm, '<h2>$1</h2>');
            
            // Lists (* or -) -> <ul><li> (must be done before paragraphs)
            html = html.replace(/^\s*[\*-]\s*(.*)$/gm, '<li>$1</li>');
            html = html.replace(/(<li>.*<\/li>(\n|.)*?<\/li>)/gs, (match) => `<ul>${match.replace(/<ul>/g, '').replace(/<\/ul>/g, '')}</ul>`); 
            
            // Paragraphs (wrap non-special lines)
            html = html.split('\n').map(line => {
                line = line.trim();
                // Check if line is empty, starts with a tag, or contains a closing tag
                if (line === '' || line.startsWith('<h2') || line.startsWith('<ul') || line.startsWith('<li') || line.startsWith('<p>') || line.endsWith('</h2>') || line.endsWith('</ul>') || line.endsWith('</li>')) {
                    return line;
                }
                return `<p>${line}</p>`;
            }).join('');
            
            // Clean up empty lines created by wrapping
            html = html.replace(/<p><\/p>/g, ''); 
            
            return html;
        }

        /**
         * Fetches data with exponential backoff for resilience.
         * @param {string} url - The API URL.
         * @param {object} payload - The body for the POST request.
         * @param {number} retries - Current retry count (max 3).
         */
        async function fetchWithBackoff(url, payload, retries = 0) {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    if (response.status === 429 && retries < 3) {
                        const delay = Math.pow(2, retries) * 1000;
                        await new Promise(resolve => setTimeout(resolve, delay));
                        return fetchWithBackoff(url, payload, retries + 1);
                    }
                    throw new Error(`API call failed with status: ${response.status}`);
                }

                return response.json();
            } catch (error) {
                console.error("Fetch failed after all retries:", error);
                throw error;
            }
        }
        
        /**
         * Shows the LLM response modal with content or a loading indicator.
         * @param {string} title - Title for the modal.
         * @param {string} contentHtml - HTML content to display.
         * @param {boolean} isLoading - Whether to show the loading spinner.
         */
        function showLlmResponse(title, contentHtml, isLoading = false) {
            llmResponseTitle.textContent = title;
            llmCitations.innerHTML = '';
            
            if (isLoading) {
                llmResponseContent.innerHTML = '';
                llmLoadingIndicator.classList.remove('hidden');
            } else {
                llmResponseContent.innerHTML = contentHtml;
                llmLoadingIndicator.classList.add('hidden');
            }

            llmResponseModal.classList.remove('hidden');
            document.body.classList.add('overflow-hidden');
            
            // Close other modals if open
            if (!cartModal.classList.contains('hidden')) {
                toggleCartModal(false);
            }
        }

        /**
         * Closes the LLM response modal.
         */
        function closeLlmResponse() {
            llmResponseModal.classList.add('hidden');
            document.body.classList.remove('overflow-hidden');
        }

        /**
         * Processes the API response to extract text and citations.
         * @param {object} result - The raw JSON response from the API.
         * @returns {{text: string, sources: Array<{uri: string, title: string}>}}
         */
        function processLlmResult(result) {
            const candidate = result.candidates?.[0];
            const text = candidate?.content?.parts?.[0]?.text || "Sorry, I couldn't generate a response right now.";
            let sources = [];
            const groundingMetadata = candidate?.groundingMetadata;

            if (groundingMetadata?.groundingAttributions) {
                sources = groundingMetadata.groundingAttributions
                    .map(attribution => ({
                        uri: attribution.web?.uri,
                        title: attribution.web?.title,
                    }))
                    .filter(source => source.uri && source.title)
                    .slice(0, 3); // Limit to top 3 sources for display
            }
            return { text, sources };
        }

        // --- Core LLM Features ---

        /**
         * LLM Feature 1: Generates a recipe based on the current cart contents.
         */
        async function generateRecipeFromCart() {
            const ingredientNames = Object.keys(cart)
                .map(id => {
                    const product = MOCK_PRODUCTS.find(p => p.id === parseInt(id));
                    // Check if product exists before accessing properties
                    if (product) {
                        return `${cart[id]} x ${product.name} (${product.unit})`;
                    }
                    return null;
                })
                .filter(name => name) // Filter out any null values if product wasn't found
                .join(', ');

            if (!ingredientNames) {
                // If cart is empty (shouldn't happen if button is enabled, but good check)
                return;
            }

            showLlmResponse("Recipe Suggestion ✨", "", true);
            generateRecipeBtn.disabled = true;
            generateRecipeBtn.innerHTML = '<div class="spinner w-6 h-6 mr-2"></div> Generating Recipe...';

            const userQuery = `Generate a simple, quick, and budget-friendly recipe (including estimated prep time, instructions, and serving size) using the following Australian grocery items: ${ingredientNames}. Prioritize using all listed items.`;
            
            const payload = {
                contents: [{ parts: [{ text: userQuery }] }],
                tools: [{ "google_search": {} }],
                systemInstruction: {
                    parts: [{ text: "You are a professional Australian home cook. Provide a single, detailed recipe and format the output using clear markdown headings (##) and unordered lists (-) and prioritize using items like rice, dal, and spices over cleaning products. Do not include any introductory or concluding text outside of the recipe itself." }]
                },
            };

            try {
                const result = await fetchWithBackoff(API_URL, payload);
                const { text, sources } = processLlmResult(result);
                
                const contentHtml = markdownToHtml(text);
                
                let citationsHtml = '';
                if (sources.length > 0) {
                    citationsHtml = 'Sources: ' + sources.map((s, i) => 
                        `<a href="${s.uri}" target="_blank" class="text-swift-accent hover:text-green-700">${s.title}</a>`
                    ).join(' | ');
                }
                
                showLlmResponse("Your Winnkit! Recipe Idea ✨", contentHtml, false);
                llmCitations.innerHTML = citationsHtml;

            } catch (e) {
                showLlmResponse("Error Generating Recipe", `<p class="text-red-500">Sorry, we couldn't fetch a recipe due to an API error. Please try again later.</p>`, false);
                console.error("Gemini API Error:", e);
            } finally {
                generateRecipeBtn.disabled = false;
                generateRecipeBtn.innerHTML = 'Generate Recipe ✨';
            }
        }

        /**
         * LLM Feature 2: Generates a fun fact or tip about a specific product.
         * @param {number} productId
         * @param {HTMLElement} buttonElement - The button that was clicked.
         */
        async function showProductInsight(productId, buttonElement) {
            const product = MOCK_PRODUCTS.find(p => p.id === productId);

            if (!product) {
                console.error("Product not found for ID:", productId);
                return;
            }

            // Set button loading state
            buttonElement.disabled = true;
            buttonElement.innerHTML = '<span class="insight-spinner spinner-sm inline-block mr-1"></span> Loading...';

            showLlmResponse(`Insight for ${product.name} ✨`, "", true);

            const userQuery = `Provide one fun, engaging fact about ${product.name} or a helpful cooking/storage tip for this item. Keep the response concise and formatted as a single paragraph.`;
            
            const payload = {
                contents: [{ parts: [{ text: userQuery }] }],
                tools: [{ "google_search": {} }],
                systemInstruction: {
                    parts: [{ text: "You are a friendly, knowledgeable grocery assistant in Australia. Your response must be a single paragraph." }]
                },
            };

            try {
                const result = await fetchWithBackoff(API_URL, payload);
                const { text, sources } = processLlmResult(result);
                
                const contentHtml = `<p>${text}</p>`;
                
                let citationsHtml = '';
                if (sources.length > 0) {
                    citationsHtml = 'Source: ' + sources.map((s, i) => 
                        `<a href="${s.uri}" target="_blank" class="text-swift-accent hover:text-green-700">${s.title}</a>`
                    ).join(' | ');
                }

                showLlmResponse(`Insight for ${product.name} ✨`, contentHtml, false);
                llmCitations.innerHTML = citationsHtml;

            } catch (e) {
                showLlmResponse(`Insight for ${product.name} ✨`, `<p class="text-red-500">Could not retrieve insight. Please check your connection.</p>`, false);
                console.error("Gemini API Error:", e);
            } finally {
                // Find the original button again since the loading state might have changed its content
                const originalButton = document.querySelector(`.insight-btn[data-id="${productId}"]`);
                if (originalButton) {
                    originalButton.disabled = false;
                    originalButton.innerHTML = 'Get Insight ✨';
                }
            }
        }

        // --- Standard Functions ---

        /**
         * Renders the category buttons and attaches click handlers for filtering.
         */
        function renderCategories() {
            const allCategories = [{ name: "All", icon: "🛒" }, ...CATEGORIES];
            
            categoryScroll.innerHTML = allCategories.map(cat => {
                const isActive = cat.name === activeCategory;
                const baseClasses = "flex-shrink-0 w-20 h-20 rounded-xl shadow-md p-2 flex flex-col items-center justify-center cursor-pointer transition duration-150";
                const activeClasses = "bg-swift-primary text-white shadow-xl hover:shadow-2xl hover:scale-[1.05]";
                const inactiveClasses = "bg-white text-gray-700 hover:shadow-lg hover:scale-[1.02]";
                
                return `
                    <div data-category="${cat.name}" class="${baseClasses} ${isActive ? activeClasses : inactiveClasses} category-btn">
                        <span class="text-3xl">${cat.icon}</span>
                        <span class="text-xs font-medium mt-1 text-center ${isActive ? 'text-white' : 'text-gray-700'}">${cat.name}</span>
                    </div>
                `;
            }).join('');

            document.querySelectorAll('.category-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const category = e.currentTarget.getAttribute('data-category');
                    filterProducts(category);
                });
            });
        }

        /**
         * Applies the product filter and re-renders the grid.
         * @param {string} category - The category to filter by (or 'All').
         */
        function filterProducts(category) {
            activeCategory = category;
            
            // Update category title
            currentCategoryTitle.textContent = category === 'All' ? 'All' : category;
            
            // Re-render categories to update active styling
            renderCategories();

            const filteredProducts = category === 'All' 
                ? MOCK_PRODUCTS 
                : MOCK_PRODUCTS.filter(p => p.category === category);
                
            renderProducts(filteredProducts);
        }

        /**
         * Renders the product cards in the main grid.
         * @param {Array} productsToRender - List of products to display.
         */
        function renderProducts(productsToRender = MOCK_PRODUCTS) {
            if (productsToRender.length === 0) {
                productGrid.innerHTML = `<div class="col-span-full text-center py-10 text-gray-500 text-lg">
                    No products found in the "${activeCategory}" category.
                </div>`;
                return;
            }

            productGrid.innerHTML = productsToRender.map(product => `
                <div id="product-${product.id}" class="bg-white rounded-xl shadow-lg p-3 flex flex-col justify-between transition duration-200 hover:shadow-xl hover:scale-[1.01]">
                    <div class="flex flex-col items-center">
                        <img src="${product.image}" alt="${product.name}" class="w-20 h-20 rounded-lg object-cover mb-2" onerror="this.onerror=null;this.src='https://placehold.co/80x80/6366F1/FFFFFF?text=Item';">
                        <p class="text-xs text-gray-500 font-medium">${product.category}</p>
                        <h3 class="text-sm font-semibold text-gray-900 mb-1 leading-snug text-center">${product.name}</h3>
                    </div>

                    <button data-id="${product.id}" class="insight-btn text-xs font-medium text-blue-500 hover:text-blue-700 mb-2 mt-1 transition flex items-center justify-center">
                        Get Insight ✨
                    </button>

                    <div class="flex items-center justify-between mt-2 pt-2 border-t border-gray-100">
                        <div class="flex flex-col">
                            <span class="text-lg font-bold text-swift-primary">$${product.price.toFixed(2)}</span>
                            <span class="text-xs text-gray-500">(${product.unit})</span>
                        </div>
                        <button data-id="${product.id}" class="add-to-cart-btn bg-swift-accent text-white text-sm font-bold px-3 py-1.5 rounded-full hover:bg-green-600 transition duration-150 shadow-md">
                            + Add
                        </button>
                    </div>
                </div>
            `).join('');

            // Attach event listeners to the generated buttons
            document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const id = parseInt(e.currentTarget.getAttribute('data-id'));
                    addToCart(id);
                });
            });
            
            // Attach event listeners for the new Insight buttons
            document.querySelectorAll('.insight-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const id = parseInt(e.currentTarget.getAttribute('data-id'));
                    showProductInsight(id, e.currentTarget);
                });
            });
        }

        /**
         * Adds an item to the cart or increments its quantity.
         * @param {number} productId 
         */
        function addToCart(productId) {
            cart[productId] = (cart[productId] || 0) + 1;
            updateCartDisplay();
        }

        /**
         * Updates the global cart count, modal content, and total.
         */
        function updateCartDisplay() {
            let totalItems = 0;
            let subtotal = 0;
            let listHTML = '';

            for (const id in cart) {
                if (cart[id] > 0) {
                    const product = MOCK_PRODUCTS.find(p => p.id === parseInt(id));
                    if (!product) continue; // Skip if product ID is invalid/missing
                    
                    const quantity = cart[id];
                    totalItems += quantity;
                    subtotal += product.price * quantity;

                    listHTML += `
                        <div class="flex items-center justify-between border-b pb-3 last:border-b-0">
                            <div class="flex items-center space-x-3">
                                <span class="text-sm font-medium text-gray-600 w-5 text-right">${quantity}x</span>
                                <h4 class="text-base font-medium text-gray-800">${product.name}</h4>
                            </div>
                            <div class="flex items-center space-x-3">
                                <span class="text-base font-semibold text-swift-secondary">$${(product.price * quantity).toFixed(2)}</span>
                                <button data-id="${id}" class="remove-from-cart text-gray-400 hover:text-swift-primary transition duration-150">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                </button>
                            </div>
                        </div>
                    `;
                }
            }

            // Update Header/Modal counts and total
            cartCountDisplay.textContent = totalItems;
            modalCartCountDisplay.textContent = totalItems;
            cartTotalDisplay.textContent = `$${subtotal.toFixed(2)}`;

            // Update Cart list
            if (totalItems === 0) {
                cartItemsList.innerHTML = '<p class="text-center text-gray-500 italic">Your basket is empty. Add some groceries!</p>';
                checkoutButton.disabled = true;
                generateRecipeBtn.disabled = true;
            } else {
                cartItemsList.innerHTML = listHTML;
                checkoutButton.disabled = false;
                generateRecipeBtn.disabled = false;
                
                // Attach remove button listeners
                document.querySelectorAll('.remove-from-cart').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const id = parseInt(e.currentTarget.getAttribute('data-id'));
                        removeFromCart(id);
                    });
                });
            }
        }

        /**
         * Removes one unit of an item from the cart.
         * @param {number} productId 
         */
        function removeFromCart(productId) {
            if (cart[productId] && cart[productId] > 0) {
                cart[productId] -= 1;
                if (cart[productId] === 0) {
                    delete cart[productId];
                }
            }
            updateCartDisplay();
        }

        /**
         * Toggles the visibility of the cart modal.
         * @param {boolean} show - true to show, false to hide.
         */
        function toggleCartModal(show) {
            if (show) {
                updateCartDisplay();
                cartModal.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
            } else {
                cartModal.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
            }
        }

        // --- Initialization and Event Listeners ---
        document.addEventListener('DOMContentLoaded', () => {
            
            // Initial render calls
            filterProducts('All');
            updateCartDisplay(); 

            // Event listener for showing the cart modal
            cartIcon.addEventListener('click', () => toggleCartModal(true));
            
            // Event listener for closing the cart modal
            closeModalButton.addEventListener('click', () => toggleCartModal(false));

            // Close cart modal when clicking outside (on the overlay)
            cartModal.addEventListener('click', (e) => {
                if (e.target === cartModal) {
                    toggleCartModal(false);
                }
            });
            
            // Event listener for closing the LLM modal
            closeLlmModal.addEventListener('click', closeLlmResponse);

            // Close LLM modal when clicking outside
            llmResponseModal.addEventListener('click', (e) => {
                if (e.target === llmResponseModal) {
                    closeLlmResponse();
                }
            });

            // Handle Generate Recipe Button
            generateRecipeBtn.addEventListener('click', generateRecipeFromCart);


            // Handle Checkout
            checkoutButton.addEventListener('click', () => {
                const total = cartTotalDisplay.textContent;
                console.log(`Order placed for ${total}. Expect delivery in 10 minutes!`);
                
                toggleCartModal(false);
                
                // Reset cart for demonstration
                cart = {};
                updateCartDisplay();
                
                // Temporary message box for user feedback (in-page)
                const confirmationBox = document.createElement('div');
                confirmationBox.className = 'fixed top-5 right-5 z-[100] bg-swift-accent text-white p-4 rounded-lg shadow-xl animate-fade-in-down';
                confirmationBox.textContent = 'Order Confirmed! Your Winnkit! order is on the way in 10 mins!';
                document.body.appendChild(confirmationBox);

                setTimeout(() => {
                    confirmationBox.remove();
                }, 3000);
            });

            // Handle location button click
            locationButton.addEventListener('click', () => {
                console.log("Location change requested.");
                const messageBox = document.createElement('div');
                messageBox.className = 'fixed top-5 right-5 z-[100] bg-blue-500 text-white p-4 rounded-lg shadow-xl animate-fade-in-down';
                messageBox.textContent = 'Location Picker functionality is placeholder.';
                document.body.appendChild(messageBox);

                setTimeout(() => {
                    messageBox.remove();
                }, 3000);
            });
        });
    </script>
</body>
</html>
